import React from 'react';

const Section: React.FC<{ title: string; children: React.ReactNode }> = ({ title, children }) => (
    <section className="mb-8 last:mb-0">
        <h3 className="text-2xl font-bold text-slate-800 dark:text-slate-200 mb-4">{title}</h3>
        <div className="space-y-4 text-slate-700 dark:text-slate-300">{children}</div>
    </section>
);

const Table: React.FC<{ headers: string[]; data: (string | number)[][] }> = ({ headers, data }) => (
    <div className="overflow-x-auto my-4 not-prose">
        <table className="w-full text-left border-collapse">
            <thead className="text-sm font-semibold text-gray-800 dark:text-slate-200 bg-gray-100 dark:bg-slate-800">
                <tr>
                    {headers.map(header => (
                        <th key={header} className="p-3 border border-gray-200 dark:border-slate-700">{header}</th>
                    ))}
                </tr>
            </thead>
            <tbody className="bg-white dark:bg-slate-900/50 text-gray-700 dark:text-slate-300">
                {data.map((row, rowIndex) => (
                    <tr key={rowIndex} className="border-b dark:border-slate-700 last:border-b-0">
                        {row.map((cell, cellIndex) => (
                            <td key={cellIndex} className="p-3 border-x border-gray-200 dark:border-slate-700">{cell}</td>
                        ))}
                    </tr>
                ))}
            </tbody>
        </table>
    </div>
);


const GptAssistantReport: React.FC = () => {
    return (
        <div className="prose prose-base max-w-none dark:prose-invert">
            <Section title="1. Введение">
                <p>Проект GPT-ассистент был создан с нуля как система интеллектуальной поддержки клиентов, способная автоматически обрабатывать запросы пользователей и снижать нагрузку на операторов. Ключевая цель — повысить качество ответов при минимальных затратах на инфраструктуру и запросы к моделям.</p>
                <p>В отличие от классических решений, проект опирался не на готовые CRM-боты, а на гибкую архитектуру RAG-типа (Retrieval-Augmented Generation), полностью собранную внутри Google-экосистемы.</p>
            </Section>

            <Section title="2. Контекст и цели проекта">
                <p>Перед началом разработки у компании уже существовали:</p>
                <ul className="list-disc list-inside">
                    <li><b>Операторская база знаний</b> — содержала внутренние инструкции, малополезные для клиентов.</li>
                    <li><b>Пользовательская база знаний</b> — покрывала менее 10 % входящих запросов.</li>
                </ul>
                <p>Поэтому было принято решение построить новую RAG-базу, которая:</p>
                <ul className="list-disc list-inside">
                    <li>собирает знания из реальных диалогов (Omnidesk);</li>
                    <li>конвертирует фразы в формат вопрос–ответ;</li>
                    <li>фильтрует неполные или противоречивые ответы;</li>
                    <li>поддерживает быстрый перезапуск обучения.</li>
                </ul>
                <p>Важной целью также стало обеспечение низкой себестоимости запроса. Инфраструктура была реализована на Google Таблицах — это позволило:</p>
                <ul className="list-disc list-inside">
                    <li>полностью исключить платные серверы;</li>
                    <li>использовать таблицы как UI, лог-хранилище и аналитическую панель;</li>
                    <li>быстро прототипировать новые сценарии без фронтенд-разработки.</li>
                </ul>
            </Section>

            <Section title="3. Архитектура и логика работы">
                <p>Ассистент изначально использовал трёхуровневую схему генерации ответов:</p>
                <Table 
                    headers={['Уровень', 'Назначение', 'Модель']}
                    data={[
                        ['Level 1', 'RAG-поиск по собственной базе знаний', 'Gemini 2.5 Flash'],
                        ['Level 2', 'Внешний поиск в интернете', 'GPT-4o'],
                        ['Level 3', 'Финальная переформулировка и стилистика', 'GPT-4o Mini'],
                    ]}
                />
                <p>Провайдером выступал GPTTunnel, обеспечивавший:</p>
                <ul className="list-disc list-inside">
                    <li>гибкое переключение моделей без изменения кода;</li>
                    <li>тестирование разных стратегий деления векторной базы (по токенам или разделителям);</li>
                    <li>единый шлюз для всех API-запросов.</li>
                </ul>
                <p>Такой подход позволил за несколько дней собрать работающий MVP и начать накопление данных.</p>
            </Section>
            
            <Section title="4. История развития проекта">
                <h4 className="text-xl font-bold">Этап I — MVP и первичная интеграция (23 – 28 июля)</h4>
                <ul className="list-disc list-inside">
                    <li>выгрузка первых 89 диалогов из Omnidesk;</li>
                    <li>ручная разметка вопросов и ответов;</li>
                    <li>первые эксперименты с RAG-файлом.</li>
                </ul>
                <p><b>Результаты:</b> точность — 5.0 / 10, стилистика — 4.1 / 10, автоматизация — 22 % (20 из 89 обращений). Ассистент уверенно справлялся с простыми запросами вроде добавления фавикона, настройки мобильной версии, всплывающих окон. Однако почти 80 % обращений всё ещё требовали участия оператора (см. отчёт 23.07–28.07).</p>

                <h4 className="mt-6 text-xl font-bold">Этап II — Оптимизация базы знаний (29 – 31 июля)</h4>
                <ul className="list-disc list-inside">
                    <li>разметка новых FAQ;</li>
                    <li>очистка дубликатов;</li>
                    <li>корректировка формулировок для улучшения мэтчинга.</li>
                </ul>
                <p><b>Результаты:</b> точность — 4.86, стилистика — 4.86, автоматизация — ≈ 12 %. Наметился прогресс в стабильности, но наблюдалась “переобученность” на конкретных фразах (ассоциативные ответы без контекста).</p>

                <h4 className="mt-6 text-xl font-bold">Этап III — Экономичный режим GENERATE (01 – 04 августа)</h4>
                <p>Для снижения расходов тестировалась схема с одним платным и одним бесплатным агентом (Gemini). Это позволило снизить стоимость обработки до ≈ 4.5 ₽, но качество временно упало (точность 4.88 / стилистика 5.53). Причина — превышение лимитов бесплатной модели, часть диалогов обрабатывалась неполноценно (см. отчёт 01.08–04.08).</p>

                <h4 className="mt-6 text-xl font-bold">Этап IV — Стабилизация и переход к платным агентам (04 – 11 августа)</h4>
                <p>Бесплатные модели были исключены, логика запросов переработана. Добавлены:</p>
                <ul className="list-disc list-inside">
                    <li>саммари по каждому диалогу;</li>
                    <li>ручная оценка ответов техподдержкой;</li>
                    <li>динамическая система баллов (score ≥ 80 % — отправка клиенту, ниже — fallback).</li>
                </ul>
                <p><b>Результаты:</b> точность 5.94, стилистика 6.88, стабильное поведение RAG-механизма. Стоимость — около 6 ₽ на запрос (см. отчёт 11.08–18.08).</p>

                <h4 className="mt-6 text-xl font-bold">Этап V — Обогащение и адаптация FAQ (21 – 25 августа)</h4>
                <p>Ассистент начал самостоятельно обогащать базу новыми примерами из логов. Появились шаблоны по повторяющимся вопросам: «Как прикрепить домен», «Почему не работает сайт», «Как продлить тариф».</p>
                <p><b>Результаты:</b> точность 6.05 / 10, стилистика 7.48 / 10, автоматизация — 76 %. Проект перешёл из экспериментальной стадии в стабильную эксплуатацию (см. отчёт 21.08–25.08).</p>

                <h4 className="mt-6 text-xl font-bold">Этап VI — Масштабирование (26 августа – 03 сентября)</h4>
                <p>Была внедрена новая версия RAG-ядра с увеличением базы до ≈ 900 QA-пар. Система достигла:</p>
                <ul className="list-disc list-inside">
                    <li>автоматизации ≈ 70 %;</li>
                    <li>точности 5.53;</li>
                    <li>стилистики 5.78.</li>
                </ul>
                <p>Остальные 30 % обращений были связаны с задачами, требующими ручных действий (например, восстановление бэкапов, перенос доменов, запросы бухгалтерии). (см. отчёт 26.08–03.09)</p>
            </Section>
            
            <Section title="5. Метрики и динамика эффективности">
                <Table 
                    headers={['Период', 'Точность', 'Стилистика', 'Автоматизация', 'Стоимость (₽)']}
                    data={[
                        ['23 – 28 июля', 5.0, 4.1, '22 %', 15],
                        ['29 – 31 июля', 4.86, 4.86, '12 %', 12],
                        ['01 – 04 августа', 6.6, 6.9, '24 %', 4.5],
                        ['04 – 11 августа', 4.88, 5.53, '36 %', 6],
                        ['11 – 18 августа', 5.94, 6.88, '39 %', 6],
                        ['21 – 25 августа', 6.05, 7.48, '76 %', '≈ 4'],
                        ['26 авг – 03 сен', 5.53, 5.78, '70 %', '≈ 3'],
                    ]}
                />
                <p><b>Общий результат:</b> за 6 недель — рост точности +18 %, стилистики +68 %, снижение себестоимости в 5 раз, и почти трёхкратное увеличение доли автоответов.</p>
            </Section>

            <Section title="6. Классификация обращений">
                <Table
                    headers={['Категория', 'Средняя доля', 'Примеры запросов']}
                    data={[
                        ['🧠 Требуется анализ специалиста', '40–45 %', '«После подключения домена сайт грузится медленно», «Письма с форм не доходят»'],
                        ['📚 Дополнить базу / FAQ', '30–40 %', '«Как отключить cookie-окно», «Где посмотреть историю публикаций»'],
                        ['🛠 Нужны действия специалиста', '10–15 %', '«Перенесите оплаченный тариф», «Удалите сайт»'],
                        ['💼 Бухгалтерия / Оплата', '5–10 %', '«Почему сумма счёта отличается», «Как продлить тариф»'],
                        ['❔ Прочее / Ошибочные', '≤ 7 %', 'Приветствия, дубликаты, бессодержательные сообщения'],
                    ]}
                />
                 <p>Эти данные позволили выделить направления для автоматизации: документация по FAQ, техническая диагностика, работа с доменами.</p>
            </Section>

            <Section title="7. Аналитика причин и гипотез улучшений">
                <p>Основные проблемы на старте:</p>
                <ul className="list-disc list-inside">
                    <li>Разнородность ответов операторов — один вопрос, разные решения.</li>
                    <li>HTML-мусор в почтовых запросах перегружал модель.</li>
                    <li>Неполные сообщения в чате (“Добрый день / помогите / не работает”).</li>
                    <li>Отсутствие стандартизации ответов по стилю и структуре.</li>
                </ul>
                <p>Принятые меры:</p>
                <ul className="list-disc list-inside">
                    <li>Алгоритм объединения сообщений (lag-обработка) — сбор коротких фраз в одно смысловое сообщение.</li>
                    <li>Предобработка писем — удаление HTML-тегов, очистка от сигнатур.</li>
                    <li>Единый шаблон ответа: вступление → основная инструкция → доп. ссылки.</li>
                    <li>Введение метрики score — оценка уверенности. При &lt; 80 % ответ не отправлялся пользователю (fallback).</li>
                </ul>
                <p><b>Результат:</b> Сокращение ложных ответов, повышение доверия и снижение ручных проверок.</p>
            </Section>

            <Section title="8. Работа с обратной связью оператора">
                <p>Каждый день руководитель технической поддержки проводил ручную оценку выборки диалогов:</p>
                <ul className="list-disc list-inside">
                    <li>уточнял неточные ответы;</li>
                    <li>добавлял удачные формулировки в базу знаний;</li>
                    <li>оставлял стилистические комментарии (эмпатия, разметка, удобочитаемость).</li>
                </ul>
                <p>Это создало контур континуального улучшения — RAG-база пополнялась ежедневно реальными кейсами.</p>
            </Section>
            
            <Section title="9. Финансовая эффективность">
                 <Table
                    headers={['Показатель', 'На старте', 'После оптимизации', 'Изменение']}
                    data={[
                        ['Стоимость запроса', '≈ 15 ₽', '≈ 6 ₽ (3 ₽ через прямой API)', '▼ −60–80 %'],
                        ['Средняя длительность обработки', '~8 сек', '~4 сек', '▼ −50 %'],
                        ['Участие операторов', '~78 %', '~30 %', '▼ −48 п.п.'],
                    ]}
                />
                <p>Таким образом, система позволила экономить до 70 % бюджета на обработке клиентских запросов при сохранении качества.</p>
            </Section>

            <Section title="10. Выводы и итоги">
                <ul className="list-disc list-inside">
                    <li>Архитектура на Google-Таблицах доказала эффективность: нулевая инфраструктура, прозрачность, лёгкое масштабирование.</li>
                    <li>RAG-модель стала ключом к росту качества — релевантность улучшилась почти на 20 %.</li>
                    <li>Стоимость одного запроса сократилась в 5 раз.</li>
                    <li>Эмпатия и читаемость ответов выросли на 68 %.</li>
                    <li>Автоматизация выросла с 22 % до 70 %.</li>
                    <li>Проект прошёл путь от MVP до устойчивой системы поддержки за 1.5 месяца.</li>
                </ul>
            </Section>

            <Section title="11. Рекомендации по развитию (RAG 2.0 / Fine-tuning)">
                <ol className="list-decimal list-inside space-y-4">
                    <li>
                        <b>Улучшение RAG-ядра</b>
                        <ul className="list-disc list-inside ml-6">
                            <li>Ввести кластеризацию по тематикам (домен, тариф, SEO и др.), чтобы ускорить поиск контекста.</li>
                            <li>Использовать динамические веса эмбеддингов (в зависимости от частоты запросов).</li>
                        </ul>
                    </li>
                    <li>
                        <b>Модельное дообучение</b>
                        <ul className="list-disc list-inside ml-6">
                            <li>Провести fine-tuning на собственных диалогах (≈ 1000 QA-пар).</li>
                            <li>Внедрить адаптивное обучение на свежих логах (еженедельный self-update).</li>
                        </ul>
                    </li>
                     <li>
                        <b>Сервисная интеграция</b>
                        <ul className="list-disc list-inside ml-6">
                            <li>Подключить прямой Omnidesk API для онлайн-обработки без экспорта.</li>
                            <li>Расширить каналы: Telegram, WAHelp, сайт-чат.</li>
                        </ul>
                    </li>
                     <li>
                        <b>Качество и аудит</b>
                        <ul className="list-disc list-inside ml-6">
                            <li>Добавить автоматическую проверку тонов ответа (вежливость, эмпатия).</li>
                            <li>Ввести взвешенный score: 70 % — точность, 30 % — стилистика.</li>
                        </ul>
                    </li>
                     <li>
                        <b>Аналитика и отчётность</b>
                        <ul className="list-disc list-inside ml-6">
                            <li>Еженедельная выгрузка метрик (точность, стилистика, себестоимость).</li>
                            <li>Автоматическое построение дашборда (Google Data Studio или Looker).</li>
                        </ul>
                    </li>
                </ol>
            </Section>
            
            <Section title="12. Заключение">
                <p>GPT-ассистент стал примером того, как можно создать полноценную AI-систему поддержки без серверов и дорогих решений, используя только облачные инструменты и продуманную архитектуру. За шесть недель проект превратился из эксперимента в надёжный инструмент, способный масштабироваться и развиваться в сторону полноценного RAG 2.0 / Fine-tuning ассистента.</p>
            </Section>

        </div>
    );
};

export default GptAssistantReport;
